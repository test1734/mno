!pip install pandas scikit-learn numpy mlxtend

import pandas as pd
import numpy as np
from sklearn.preprocessing import OrdinalEncoder, LabelEncoder
from sklearn.naive_bayes import CategoricalNB
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder

# ====== STEP 1: Load dataset (make sure file is in same folder) ======
df = pd.read_csv("diabetes.csv")   # change filename if needed
print("=== Dataset Loaded ===")
print(df.head(), "\n")

# ====== STEP 2: Split features & label ======
X = df.drop("Outcome", axis=1)
y = df["Outcome"]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# ====== STEP 3: Train Decision Tree Classifier ======
clf = DecisionTreeClassifier(criterion="entropy", random_state=42)
clf.fit(X_train, y_train)

# ====== STEP 4: Evaluate model ======
y_pred = clf.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {acc*100:.2f}%\n")
print("Classification Report:\n", classification_report(y_test, y_pred))

# ====== STEP 5: Predict for a new patient (example) ======
# You can change these values to test manually
new_patient = pd.DataFrame([{
    "Glucose": 120,
    "Blood Pressure": 70,
    "Skin Thickness": 25,
    "Insulin": 80,
    "BMI": 30.0,
    "Age": 35
}])

prediction = clf.predict(new_patient)[0]
print("=== Prediction for New Patient ===")
print(new_patient.to_string(index=False))
print("\nPredicted Outcome:", "Diabetic" if prediction == 1 else "Non-Diabetic")

# ====== STEP 6: Visualize the Decision Tree ======
plt.figure(figsize=(12,6))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=["Non-Diabetic", "Diabetic"], rounded=True)
plt.title("Decision Tree for Diabetes Prediction")
plt.show()

